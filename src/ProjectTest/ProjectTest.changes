----QUIT----2024-10-04T14:19:23.96386+02:00 Pharo12.0-SNAPSHOT-64bit-92f4878b0c.image priorSource: 0!----QUIT----2024-10-04T14:19:23.964523+02:00 Pharo12.0-SNAPSHOT-64bit-92f4878b0c.image priorSource: 0!----QUIT----2024-10-04T14:19:44.449624+02:00 Pharo12.0-SNAPSHOT-64bit-92f4878b0c.image priorSource: 103!----QUIT----2024-10-04T14:19:44.450379+02:00 Pharo12.0-SNAPSHOT-64bit-92f4878b0c.image priorSource: 207!Object << #MyTestClass	layout: FixedLayout;	traits: {};	slots: {};	sharedVariables: {};	sharedPools: {};	tag: '' ;	package: 'ProjectFruitTree'!----SNAPSHOT----2024-10-09T17:18:34.907+03:00 ProjectTest.image priorSource: 313!----SNAPSHOT----2024-10-09T17:18:34.937+03:00 ProjectTest.image priorSource: 571!!MyTestClassTest commentStamp: '<historical>' prior: 0!A MyTestClassTest is a test class for testing the behavior of MyTestClass!----SNAPSHOT----2024-10-09T17:23:20.822+03:00 ProjectTest.image priorSource: 654!----SNAPSHOT----2024-10-09T17:23:20.851+03:00 ProjectTest.image priorSource: 868!!MyTestClassTest methodsFor: 'basic tests' stamp: '10/9/2024 17:23'!testCreatingMyCounter  "A test that will check if the creation of an object MyCounter is done properly"  |tmp|  tmp := MyTestClass new.  self deny: (tmp = nil)! !!MyTestClassTest methodsFor: 'basic tests' stamp: '10/9/2024 17:23'!testCreatingMyTestClass  "A test that will check if the creation of an object MyCounter is done properly"  |tmp|  tmp := MyTestClass new.  self deny: (tmp = nil)! !MyTestClassTest removeSelector: #testCreatingMyCounter!----SNAPSHOT----2024-10-09T17:26:06.932+03:00 ProjectTest.image priorSource: 951!----SNAPSHOT----2024-10-09T17:26:06.956+03:00 ProjectTest.image priorSource: 1565!Object << #MyTestClass	slots: {#counter};	package: 'ProjectFruitTree'!!MyTestClass methodsFor: 'nil' stamp: '10/9/2024 17:28'!>initialize [        counter := 0.  "Initial value for counter"    ]! !!MyTestClass methodsFor: 'comparing' stamp: '10/9/2024 17:28'!initialize [        counter := 0.  "Initial value for counter"    ]! !MyTestClass removeSelector: #>!----SNAPSHOT----2024-10-09T17:28:32.873+03:00 ProjectTest.image priorSource: 1648!----SNAPSHOT----2024-10-09T17:28:32.904+03:00 ProjectTest.image priorSource: 2106!----SNAPSHOT----2024-10-09T17:28:36.008+03:00 ProjectTest.image priorSource: 2190!----SNAPSHOT----2024-10-09T17:28:36.042+03:00 ProjectTest.image priorSource: 2274!!MyTestClass methodsFor: 'comparing' stamp: '10/9/2024 17:28' prior: 4003!initialize [        counter := 0.     ]! !!MyTestClass methodsFor: 'nil' stamp: '10/9/2024 17:28'!increment [    counter := counter + 1.]! !----SNAPSHOT----2024-10-09T17:28:52.317+03:00 ProjectTest.image priorSource: 2358!----SNAPSHOT----2024-10-09T17:28:52.342+03:00 ProjectTest.image priorSource: 2664!----SNAPSHOT----2024-10-09T17:29:04.184+03:00 ProjectTest.image priorSource: 2748!----SNAPSHOT----2024-10-09T17:29:04.222+03:00 ProjectTest.image priorSource: 2832!----SNAPSHOT----2024-10-09T17:29:11.795+03:00 ProjectTest.image priorSource: 2916!----SNAPSHOT----2024-10-09T17:29:11.827+03:00 ProjectTest.image priorSource: 3000!!MyTestClass methodsFor: 'nil' stamp: '10/9/2024 17:29'!decrement [    counter := counter - 1.]! !!MyTestClass methodsFor: 'nil' stamp: '10/9/2024 17:29'!counter [    ^counter.]! !----SNAPSHOT----2024-10-09T17:31:08.863+03:00 ProjectTest.image priorSource: 3084!----SNAPSHOT----2024-10-09T17:31:08.902+03:00 ProjectTest.image priorSource: 3356!!MyTestClassTest methodsFor: 'nil' stamp: '10/9/2024 17:33'!testIncrementing  "A test that will check if method increment is working properly.     Test value 5. Expected result 6."  |counter|  counter := MyTestClass new.  counter counter: 5.  counter increment.  self assert: (counter value = 6)! !!MyTestClassTest methodsFor: 'nil' stamp: '10/9/2024 17:34'!testDecrementing  "A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."  |counter|  counter := MyTestClass new.  counter value: 5.  counter decrement.  self assert: (counter value = 4)! !!MyTestClass methodsFor: 'nil' stamp: '10/9/2024 17:36'!counter: anInteger	"Method that sets *annteger* as a variable value"	counter := anInteger! !!MyTestClassTest methodsFor: 'tests' stamp: '10/9/2024 17:37' prior: 7787!testDecrementing  "A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."  |counter|  counter := MyTestClass new.  counter counter: 5.  counter decrement.  self assert: (counter value = 4)! !----SNAPSHOT----2024-10-09T17:40:26.749+03:00 ProjectTest.image priorSource: 3440!----SNAPSHOT----2024-10-09T17:40:26.789+03:00 ProjectTest.image priorSource: 4611!BaselineOf subclass: #BaselineOfProjectFruitTree    instanceVariableNames: ''    classVariableNames: ''    package: 'BaselineOfProjectFruitTree'!!BaselineOfProjectFruitTree methodsFor: 'nil' stamp: '10/9/2024 17:46'!baseline: spec    <baseline>    spec for: #common do: [                  "Packages"        spec            package: 'ProjectFruitTree';            package: 'ProjectFruitTree-Tests' with: [ spec requires: #('ProjectFruitTree') ] ].! !----SNAPSHOT----2024-10-09T17:46:12.849+03:00 ProjectTest.image priorSource: 4695!----SNAPSHOT----2024-10-09T17:46:12.873+03:00 ProjectTest.image priorSource: 5242!----SNAPSHOT----2024-10-09T17:55:26.112+03:00 ProjectTest.image priorSource: 5326!----SNAPSHOT----2024-10-09T17:55:26.122+03:00 ProjectTest.image priorSource: 5410!Object << #FruitTree	slots: {#species. #age. #height. #yield. #fruitingAge.};	sharedVariables: {};	package: 'ProjectFruitTree'!!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:22'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge [    species := aSpecies.    age := anAge.    height := aHeight.    yield := aYield.    fruitingAge := aFruitingAge.]! !!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:26'!growOneYear [    age := age + 1.    height := height + 0.5. "Height increase"    (age >= fruitingAge) ifTrue: [        yield := yield + 10. "Increasing of yield after start of fruiting"    ].]! !----SNAPSHOT----2024-10-09T19:26:44.587+03:00 ProjectTest.image priorSource: 5494!----SNAPSHOT----2024-10-09T19:26:44.604+03:00 ProjectTest.image priorSource: 6241!!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:27'!getYield [    ^(age >= fruitingAge) ifTrue: [yield] ifFalse: [0].]! !----SNAPSHOT----2024-10-09T19:27:46.665+03:00 ProjectTest.image priorSource: 6325!----SNAPSHOT----2024-10-09T19:27:46.684+03:00 ProjectTest.image priorSource: 6536!----SNAPSHOT----2024-10-09T19:28:41.932+03:00 ProjectTest.image priorSource: 6620!----SNAPSHOT----2024-10-09T19:28:41.963+03:00 ProjectTest.image priorSource: 6704!!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:29'!= anObject [    ^anObject isKindOf: FruitTree ifTrue: [self species = anObject species and: [self age = anObject age]]]! !!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:30'!printOn: aStream [    aStream        nextPutAll: 'Species: ', species;        cr;        nextPutAll: 'Age: ', age asString;        cr;        nextPutAll: 'Height: ', height asString;        cr;        nextPutAll: 'Yield: ', yield asString.]! !----SNAPSHOT----2024-10-09T19:30:33.936+03:00 ProjectTest.image priorSource: 6788!----SNAPSHOT----2024-10-09T19:30:33.966+03:00 ProjectTest.image priorSource: 7360!----SNAPSHOT----2024-10-09T19:37:28.827+03:00 ProjectTest.image priorSource: 7444!----SNAPSHOT----2024-10-09T19:37:28.856+03:00 ProjectTest.image priorSource: 7528!----SNAPSHOT----2024-10-09T19:42:28.936+03:00 ProjectTest.image priorSource: 7612!----SNAPSHOT----2024-10-09T19:42:28.946+03:00 ProjectTest.image priorSource: 7696!----SNAPSHOT----2024-10-09T19:46:57.65+03:00 ProjectTest.image priorSource: 7780!----SNAPSHOT----2024-10-09T19:46:57.696+03:00 ProjectTest.image priorSource: 7864!FruitTree << #AppleTree	slots: {#isFruitYear. #fruitColor. };	package: 'ProjectFruitTree'!----SNAPSHOT----2024-10-09T19:47:34.702+03:00 ProjectTest.image priorSource: 7947!----SNAPSHOT----2024-10-09T19:47:34.732+03:00 ProjectTest.image priorSource: 8125!!AppleTree methodsFor: 'nil' stamp: '10/9/2024 19:47'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge fruitColor: aColor [    super initializeSpecies: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    fruitColor := aColor.    isFruitYear := true. "Яблуня плодоносить раз на два роки"]! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 19:48' prior: 16699!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge fruitColor: aColor [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    fruitColor := aColor.    isFruitYear := true. "Яблуня плодоносить раз на два роки"]! !!AppleTree methodsFor: 'nil' stamp: '10/9/2024 19:48'!growOneYear [    age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"    (age >= fruitingAge and: [isFruitYear]) ifTrue: [        self increaseYield.    ].]! !!FruitTree methodsFor: 'nil' stamp: '10/9/2024 19:49'!increaseYield [    yield := yield + 10.]! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 19:50' prior: 12081!growOneYear [    age := age + 1.    height := height + 0.5. "Height increase"    (age >= fruitingAge) ifTrue: [        self increaseYield. "Increasing of yield after start of fruiting"    ].]! !!AppleTree methodsFor: 'nil' stamp: '10/9/2024 19:54'! printOn: aStream [    super printOn: aStream.    aStream        cr;        nextPutAll: 'Fruit Color: ', fruitColor.]! !FruitTree << #ApricotTree	slots: {#wasFrost.};	package: 'ProjectFruitTree'!!ApricotTree methodsFor: 'nil' stamp: '10/9/2024 19:58'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge wasFrost: aWasFrost [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    wasFrost := aWasFrost.]! !!ApricotTree methodsFor: 'nil' stamp: '10/9/2024 19:58'!growOneYear [    age := age + 1.    height := height + 0.5.    (age >= fruitingAge) ifTrue: [        wasFrost ifTrue: [self decreaseYield].        wasFrost ifFalse: [self increaseYield].    ].]! !!ApricotTree methodsFor: 'nil' stamp: '10/9/2024 19:59'!decreaseYield [    yield := yield * 0.2. "yield decreased to 20% when tree was frozen"]! !!ApricotTree methodsFor: 'nil' stamp: '10/9/2024 19:59'!printOn: aStream [    super printOn: aStream.    aStream        cr;        nextPutAll: 'Was there frost during flowering: ', wasFrost asString.]! !!FruitTree methodsFor: 'nil' stamp: '10/9/2024 20:05'!initialize [    species := 'Fig'.    age := 0.    height := 1.0.    yield := 3.    fruitingAge := 1. "Плодоношення починається з 3 років за замовчуванням"]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:06' prior: 22007!initialize [    species := 'Fig'.    age := 0.    height := 1.0.    yield := 3.    fruitingAge := 1. ]! !----SNAPSHOT----2024-10-09T20:06:46.33+03:00 ProjectTest.image priorSource: 8209!----SNAPSHOT----2024-10-09T20:06:46.364+03:00 ProjectTest.image priorSource: 11402!!FruitTree class methodsFor: 'nil' stamp: '10/9/2024 20:07'!newWithDefaults [    ^self new initialize]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:10' prior: 11533!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge [    species := aSpecies ifNil: ['Fig'].    age := anAge ifNil: [0].    height := aHeight ifNil: [1.0].    yield := aYield ifNil: [3].    fruitingAge := aFruitingAge ifNil: [1].]! !----SNAPSHOT----2024-10-09T20:44:04.553+03:00 ProjectTest.image priorSource: 11485!----SNAPSHOT----2024-10-09T20:44:04.553+03:00 ProjectTest.image priorSource: 12038!!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 20:46'!growOneYear: frostOccurred [    age := age + 1.    height := height + 0.5. "Height increase"    (age >= fruitingAge) ifTrue: [        self increaseYield. "Increasing of yield after start of fruiting"    ].]! !Object << #FruitTree	slots: { #species . #age . #height . #yield . #fruitingAge. #wasFrost. };	package: 'ProjectFruitTree'!Object << #FruitTree	slots: { #species . #age . #height . #yield . #fruitingAge . #wasFrost };	package: 'ProjectFruitTree'!Object << #FruitTree	slots: { #species . #age . #height . #yield . #fruitingAge . #wasFrost };	package: 'ProjectFruitTree'!FruitTree << #ApricotTree	slots: {  };	package: 'ProjectFruitTree'!Object << #FruitTree	slots: { #species . #age . #height . #yield . #fruitingAge . #wasFrost};	package: 'ProjectFruitTree'!!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:50' prior: 22583!initialize [    species := 'Fig'.    age := 0.    height := 1.0.    yield := 3.    fruitingAge := 1. 	 wasFrost := false.]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:50'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge wasFrost: awasFrost [    species := aSpecies ifNil: ['Fig'].    age := anAge ifNil: [0].    height := aHeight ifNil: [1.0].    yield := aYield ifNil: [3].    fruitingAge := aFruitingAge ifNil: [1].]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:51'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured [    species := aSpecies ifNil: ['Fig'].    age := anAge ifNil: [0].    height := aHeight ifNil: [1.0].    yield := aYield ifNil: [3].    fruitingAge := aFruitingAge ifNil: [1].]! !Object << #FruitTree	slots: { #species . #age . #height . #yield . #fruitingAge . #frostOccured };	package: 'ProjectFruitTree'!FruitTree removeSelector: #initializeTree:age:height:yield:fruitingAge:wasFrost:!FruitTree removeSelector: #initializeTree:age:height:yield:fruitingAge:!!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:52' prior: 26307!initialize [    species := 'Fig'.    age := 0.    height := 1.0.    yield := 3.    fruitingAge := 1. 	 frostOccured := false.]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 20:53' prior: 27437!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured [    species := aSpecies ifNil: ['Fig'].    age := anAge ifNil: [0].    height := aHeight ifNil: [1.0].    yield := aYield ifNil: [3].    fruitingAge := aFruitingAge ifNil: [1].	 frostOccured := afrostOccured ifNil: [false].]! !FruitTree removeSelector: #growOneYear!!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 20:55' prior: 24561!growOneYear: frostStatus [    age := age + 1.    height := height + 0.5. "Height increase"    (age >= fruitingAge) ifTrue: [        self increaseYield. "Increasing of yield after start of fruiting"    ].]! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 20:55' prior: 30181!growOneYear: frostStatus [    age := age + 1.    height := height + 0.5. "Height increase"    frostOccured := frostStatus.    (age >= fruitingAge) ifTrue: [        self increaseYield. "Increasing of yield after start of fruiting"    ].]! !!AppleTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 20:56'!growOneYear: frostStatus[    age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"    (age >= fruitingAge and: [isFruitYear]) ifTrue: [        self increaseYield.    ].]! !!AppleTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 20:56' prior: 31413!growOneYear: frostStatus[    age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"	 frostOccured := frostStatus.    (age >= fruitingAge and: [isFruitYear]) ifTrue: [        self increaseYield.    ].]! !AppleTree removeSelector: #growOneYear!----SNAPSHOT----2024-10-09T20:56:40.676+03:00 ProjectTest.image priorSource: 12123!----SNAPSHOT----2024-10-09T20:56:40.696+03:00 ProjectTest.image priorSource: 16309!!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 20:58'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge fruitColor: aColor frostOccured: afrostOccured [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    fruitColor := aColor.    isFruitYear := true. "Apple tree gives fruits ine time per two years"    frostOccured := afrostOccured. ]! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 20:58' prior: 33093!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge fruitColor: aColor frostOccured: afrostOccured [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    fruitColor := aColor.    isFruitYear := true. "Apple tree gives fruits ine time per two years"    ]! !AppleTree removeSelector: #initializeTree:age:height:yield:fruitingAge:fruitColor:!!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 20:59'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured fruitColor: aColor  [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge.    fruitColor := aColor.    isFruitYear := true. "Apple tree gives fruits ine time per two years"    ]! !AppleTree removeSelector: #initializeTree:age:height:yield:fruitingAge:fruitColor:frostOccured:!!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 21:00' prior: 35031!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured fruitColor: aColor  [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured.    fruitColor := aColor.    isFruitYear := true. "Apple tree gives fruits ine time per two years"    ]! !!ApricotTree methodsFor: 'initialization' stamp: '10/9/2024 21:02'!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured [    super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured .    ]! !ApricotTree removeSelector: #initializeTree:age:height:yield:fruitingAge:wasFrost:!!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 21:03'!growOneYear: frostStatus[    age := age + 1.    height := height + 0.5.	 frostOccured := frostStatus.	     (age >= fruitingAge) ifTrue: [        frostOccured ifTrue: [self decreaseYield].        frostOccured ifFalse: [self increaseYield].    ].]! !ApricotTree removeSelector: #growOneYear!!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 21:04' prior: 21591!printOn: aStream [    super printOn: aStream.    aStream        cr;        nextPutAll: 'Was there frost during flowering: ', frostOccured asString.]! !!AppleTree methodsFor: 'nil' stamp: '10/9/2024 21:11'!initialize [    species := 'RedApple'.    age := 0.    height := 2.0.    yield := 10.    fruitingAge := 1.	 isFruitYear := false.	 fruitColor:= 'Red' .	 frostOccured := false.]! !!ApricotTree methodsFor: 'nil' stamp: '10/9/2024 21:12'!initialize [    species := 'Apricot Tree'.    age := 0.    height := 1.0.    yield := 0.    fruitingAge := 3.     frostOccured := false. ]! !!ApricotTree methodsFor: 'initialization' stamp: '10/9/2024 21:12' prior: 39509!initialize [    species := 'Apricot Tree'.    age := 0.    height := 1.0.    yield := 10.    fruitingAge := 3.     frostOccured := false. ]! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 21:13' prior: 39017!initialize [    species := 'RedApple'.    age := 0.    height := 2.0.    yield := 5.    fruitingAge := 1.	 isFruitYear := false.	 fruitColor:= 'Red' .	 frostOccured := false.]! !----SNAPSHOT----2024-10-09T21:18:57.627+03:00 ProjectTest.image priorSource: 16394!----SNAPSHOT----2024-10-09T21:18:57.654+03:00 ProjectTest.image priorSource: 20400!!AppleTree class methodsFor: 'nil' stamp: '10/9/2024 21:19'!newWithDefaults [    ^self new initialize]! !!ApricotTree class methodsFor: 'nil' stamp: '10/9/2024 21:20'!newWithDefaults [    ^self new initialize]! !----SNAPSHOT----2024-10-09T21:20:20.187+03:00 ProjectTest.image priorSource: 20485!----SNAPSHOT----2024-10-09T21:20:20.217+03:00 ProjectTest.image priorSource: 20790!----SNAPSHOT----2024-10-09T21:23:41.136+03:00 ProjectTest.image priorSource: 20875!----SNAPSHOT----2024-10-09T21:23:41.171+03:00 ProjectTest.image priorSource: 20960!!AppleTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 21:27' prior: 32029!growOneYear: frostStatus [    age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"	 frostOccured := frostStatus.    (age >= fruitingAge and: [isFruitYear]) ifTrue: [        self increaseYield.    ].]! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 21:27' prior: 37841!growOneYear: frostStatus [    age := age + 1.    height := height + 0.5.	 frostOccured := frostStatus.	     (age >= fruitingAge) ifTrue: [        frostOccured ifTrue: [self decreaseYield].        frostOccured ifFalse: [self increaseYield].    ].]! !!FruitTree methodsFor: 'printing' stamp: '10/9/2024 21:36'!printTree: aStream [    aStream        nextPutAll: 'Species: ', species;        cr;        nextPutAll: 'Age: ', age asString;        cr;        nextPutAll: 'Height: ', height asString;        cr;        nextPutAll: 'Yield: ', yield asString.]! !!AppleTree methodsFor: 'printing' stamp: '10/9/2024 21:36'!printTree: aStream [    super printOn: aStream.    aStream        cr;        nextPutAll: 'Fruit Color: ', fruitColor.]! !!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 21:36'!printtree: aStream [    super printOn: aStream.    aStream        cr;        nextPutAll: 'Was there frost during flowering: ', frostOccured asString.]! !FruitTree removeSelector: #printOn:!!FruitTree methodsFor: 'printing' stamp: '10/9/2024 21:55' prior: 43753!printTree: aTranscript [    aTranscript        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        cr.  "New line"]! !----SNAPSHOT----2024-10-09T21:55:47.417+03:00 ProjectTest.image priorSource: 21045!----SNAPSHOT----2024-10-09T21:55:47.442+03:00 ProjectTest.image priorSource: 23012!!FruitTree methodsFor: 'printing' stamp: '10/9/2024 22:08' prior: 45301!printTree: aTranscript [    aTranscript		  open        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        cr.  "New line"]! !!FruitTree methodsFor: 'printing' stamp: '10/9/2024 22:08' prior: 46513!printTree: aTranscript [	    aTranscript		  open        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        cr.  "New line"]! !!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 22:10' prior: 28787!initialize     species := 'Fig'.    age := 0.    height := 1.0.    yield := 3.    fruitingAge := 1. 	 frostOccured := false.! !!FruitTree methodsFor: 'printing' stamp: '10/9/2024 22:10' prior: 47403!printTree: aTranscript 	    aTranscript		  open        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        cr.  "New line"! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:10' prior: 18859!increaseYield     yield := yield + 10.! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:10' prior: 30777!growOneYear: frostStatus     age := age + 1.    height := height + 0.5. "Height increase"    frostOccured := frostStatus.    (age >= fruitingAge) ifTrue: [        self increaseYield. "Increasing of yield after start of fruiting"    ].! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:11' prior: 12931!getYield     ^(age >= fruitingAge) ifTrue: [yield] ifFalse: [0].! !!FruitTree methodsFor: 'printing' stamp: '10/9/2024 22:12' prior: 48725!printTree: aTranscript 	    aTranscript        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        cr.  "New line"! !----SNAPSHOT----2024-10-09T22:15:10.436+03:00 ProjectTest.image priorSource: 23097!----SNAPSHOT----2024-10-09T22:15:10.463+03:00 ProjectTest.image priorSource: 25780!!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:25' prior: 44383!printTree: aStream     super printOn: aStream.    aStream        cr;        nextPutAll: 'Fruit Color: ', fruitColor.! !!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:25' prior: 52049!printTree: Transcript     super printOn: Transcript .    Transcript         cr;        nextPutAll: 'Fruit Color: ', fruitColor.! !AppleTree removeSelector: #printOn:!!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 22:26' prior: 36095!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured fruitColor: aColor      super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured.    fruitColor := aColor.    isFruitYear := true. "Apple tree gives fruits ine time per two years"    ! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 22:26' prior: 40427!initialize     species := 'RedApple'.    age := 0.    height := 2.0.    yield := 5.    fruitingAge := 1.	 isFruitYear := false.	 fruitColor:= 'Red' .	 frostOccured := false.! !!AppleTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:26' prior: 42431!growOneYear: frostStatus     age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"	 frostOccured := frostStatus.    (age >= fruitingAge and: [isFruitYear]) ifTrue: [        self increaseYield.    ].! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:26' prior: 21291!decreaseYield     yield := yield * 0.2. "yield decreased to 20% when tree was frozen"! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:26' prior: 43115!growOneYear: frostStatus     age := age + 1.    height := height + 0.5.	 frostOccured := frostStatus.	     (age >= fruitingAge) ifTrue: [        frostOccured ifTrue: [self decreaseYield].        frostOccured ifFalse: [self increaseYield].    ].! !!ApricotTree methodsFor: 'initialization' stamp: '10/9/2024 22:26' prior: 39969!initialize     species := 'Apricot Tree'.    age := 0.    height := 1.0.    yield := 10.    fruitingAge := 3.     frostOccured := false. ! !!ApricotTree methodsFor: 'initialization' stamp: '10/9/2024 22:26' prior: 36997!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured     super initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured .   ! !!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 22:26' prior: 38593!printOn: aStream     super printOn: aStream.    aStream        cr;        nextPutAll: 'Was there frost during flowering: ', frostOccured asString.! !!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 22:27'!printTree: aTranscript     super printOn: Transcript .    Transcript         cr;        nextPutAll: 'Was there frost during flowering: ', frostOccured asString.! !ApricotTree removeSelector: #printtree:!ApricotTree removeSelector: #printOn:!----SNAPSHOT----2024-10-09T22:29:26.181+03:00 ProjectTest.image priorSource: 25865!----SNAPSHOT----2024-10-09T22:29:26.214+03:00 ProjectTest.image priorSource: 29092!!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:32' prior: 52445!printTree: aTranscript     aTranscript        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        nextPutAll: 'Fruit Color: ', fruitColor.! !!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 22:33' prior: 57685!printTree: aTranscript      aTranscript        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        show: 'Was there frost during flowering: ', frostOccured asString.! !!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:34' prior: 58673!printTree: aTranscript     aTranscript        show: 'Species: ', species;        show: ', Age: ', age printString;        show: ', Height: ', height printString;        show: ', Yield: ', yield printString;        show: ', Fruiting Age: ', fruitingAge printString;        show: ', Frost Occurred: ', frostOccured printString;        show: 'Fruit Color: ', fruitColor.! !!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:36' prior: 60567!printTree: aTranscript     aTranscript        show: 'Species: ', species;  cr;        show: ', Age: ', age printString;  cr;        show: ', Height: ', height printString;  cr;        show: ', Yield: ', yield printString;  cr;        show: ', Fruiting Age: ', fruitingAge printString;  cr;        show: ', Frost Occurred: ', frostOccured printString; cr;        show: 'Fruit Color: ', fruitColor; cr. ! !!AppleTree methodsFor: 'printing' stamp: '10/9/2024 22:38' prior: 61473!printTree: aTranscript     aTranscript        show: 'Species: ', species;  cr;        show: 'Age: ', age printString;  cr;        show: 'Height: ', height printString;  cr;        show: 'Yield: ', yield printString;  cr;        show: 'Fruiting Age: ', fruitingAge printString;  cr;        show: 'Frost Occurred: ', frostOccured printString; cr;        show: 'Fruit Color: ', fruitColor; cr. ! !!ApricotTree methodsFor: 'printing' stamp: '10/9/2024 22:39' prior: 59595!printTree: aTranscript      aTranscript        show: 'Species: ', species; cr;        show: 'Age: ', age printString; cr;        show: 'Height: ', height printString; cr;        show: 'Yield: ', yield printString; cr;        show: 'Fruiting Age: ', fruitingAge printString; cr;        show: 'Frost Occurred: ', frostOccured printString; cr.        ! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:41' prior: 55091!decreaseYield     yield := yield * 0.2. "yield decreased to 20% when tree was frozen"! !----SNAPSHOT----2024-10-09T22:42:21.013+03:00 ProjectTest.image priorSource: 29177!----SNAPSHOT----2024-10-09T22:42:21.055+03:00 ProjectTest.image priorSource: 32239!!FruitTree methodsFor: 'initialization' stamp: '10/9/2024 22:43' prior: 48309!initialize     species := 'Fig'.    age := 0.    height := 1.0.    yield := 0.    fruitingAge := 1. 	 frostOccured := false.! !----SNAPSHOT----2024-10-09T22:44:07.684+03:00 ProjectTest.image priorSource: 32324!----SNAPSHOT----2024-10-09T22:44:07.722+03:00 ProjectTest.image priorSource: 32623!----SNAPSHOT----2024-10-09T22:47:08.03+03:00 ProjectTest.image priorSource: 32708!----SNAPSHOT----2024-10-09T22:47:08.069+03:00 ProjectTest.image priorSource: 32793!!ApricotTree methodsFor: 'initialization' stamp: '10/9/2024 22:47' prior: 56121!initialize     species := 'Apricot Tree'.    age := 0.    height := 1.0.    yield := 0.    fruitingAge := 3.     frostOccured := true. ! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:53' prior: 55445!growOneYear: frostStatus     age := age + 1.    height := height + 0.5.	 frostOccured := frostStatus.	     (age >= fruitingAge) ifTrue: [        frostOccured ifTrue: [self decreaseYield].        frostOccured ifFalse: [self increaseYield].    ]	! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:53' prior: 66553!growOneYear: frostStatus	age := age + 1.	height := height + 0.5.	frostOccured := frostStatus.	age >= fruitingAge ifFalse: [ ^ self ].	frostOccured ifTrue: [ self decreaseYield ].	frostOccured ifFalse: [ self increaseYield ]! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:55' prior: 64299!decreaseYield     yield := yield + yield* 0.2. "yield decreased to 20% when tree was frozen"! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 22:57' prior: 67883!decreaseYield     yield := yield + yield * 0.2. "yield decreased to 20% when tree was frozen"! !!ApricotTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 23:00' prior: 68251!decreaseYield     yield := yield* 1.2. "yield decreased to 20% when tree was frozen"! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 23:01' prior: 53871!initialize     species := 'RedApple'.    age := 0.    height := 2.0.    yield := 0.    fruitingAge := 1.	 isFruitYear := false.	 fruitColor:= 'Red' .	 frostOccured := false.! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 23:02' prior: 68959!initialize     species := 'RedApple'.    age := 0.    height := 2.0.    yield := 0.    fruitingAge := 2.	 isFruitYear := false.	 fruitColor:= 'Red' .	 frostOccured := false.! !----SNAPSHOT----2024-10-09T23:18:05.941+03:00 ProjectTest.image priorSource: 32877!----SNAPSHOT----2024-10-09T23:18:05.978+03:00 ProjectTest.image priorSource: 34929!!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 23:52' prior: 69489!initialize     species := 'RedApple'.    age := 0.    height := 2.0.    yield := 0.    fruitingAge := 2.	 isFruitYear := true.	 fruitColor:= 'Red' .	 frostOccured := false.! !!AppleTree methodsFor: 'initialization' stamp: '10/9/2024 23:54' prior: 70359!initialize     species := 'RedApple'.    age := 0.    height := 2.0.    yield := 0.    fruitingAge := 0.	 isFruitYear := true.	 fruitColor:= 'Red' .	 frostOccured := false.! !!AppleTree methodsFor: 'as yet unclassified' stamp: '10/9/2024 23:56' prior: 54411!growOneYear: frostStatus     age := age + 1.    height := height + 0.5.    isFruitYear := isFruitYear not. "Yield after year"    (age >= fruitingAge)			ifTrue:[  isFruitYear 						ifTrue: [        self increaseYield.    ]].! !----SNAPSHOT----2024-10-10T00:00:00.968+03:00 ProjectTest.image priorSource: 35014!----SNAPSHOT----2024-10-10T00:00:00.988+03:00 ProjectTest.image priorSource: 35948!----SNAPSHOT----2024-10-10T00:05:23.44+03:00 ProjectTest.image priorSource: 36033!----SNAPSHOT----2024-10-10T00:05:23.484+03:00 ProjectTest.image priorSource: 36118!!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:05'!testDecrising  "A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."  |tree|  tree := ApricotTree new.  tree initializeTree: ApricotTree age: 4  height: 1  yield: 10  fruitingAge: 1  frostOccured: true.  tree decreaseYield .  self assert: (tree yield value = 12.0)! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:05' prior: 72705!testDecrising	"A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."	| tree |	tree := ApricotTree new.	tree		initializeTree: ApricotTree		age: 4		height: 1		yield: 10		fruitingAge: 1		frostOccured: true.	tree decreaseYield.	self assert: tree yield value equals: 12.0! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:12' prior: 73509!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree decreaseYield."Expected result after decreasing yield by 20%"	"Check if the actual yield matches the expected yield"(tree yield = 12.0)    ifTrue: [Transcript show: 'Test Passed: Yield is ', tree yield printString; cr]    ifFalse: [Transcript show: 'Test Failed: Expected ', 12.0 printString, ' but got ', tree yield printString; cr].	! !!FruitTree methodsFor: 'as yet unclassified' stamp: '10/10/2024 00:25' prior: 50551!getYield     ^yield.! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:26' prior: 74329!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree decreaseYield."Expected result after decreasing yield by 20%"	"Check if the actual yield matches the expected yield"(tree getYield = 12.0)    ifTrue: [Transcript show: 'Test Passed: Yield is ', tree getYield printString; cr]    ifFalse: [Transcript show: 'Test Failed: Expected ', 12.0 printString, ' but got ', tree getYield printString; cr].	! !!FruitTree methodsFor: 'nil' stamp: '10/10/2024 00:28'!getAge	^age.	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:29' prior: 76063!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree decreaseYield.self assert: (tree getYield = 12.0)	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:31' prior: 77743!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree growOneYear: true.tree getYieldself assert: (tree getYield = 12.0)	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:32' prior: 78675!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree growOneYear: true.self assert: (tree getYield = 12)	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:33' prior: 79641!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree decreaseYield self assert: (tree getYield = 12)	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:34' prior: 80575!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."|tree|tree := ApricotTree new.tree initializeTree: 'Apricot Tree'        age: 4        height: 1        yield: 10        fruitingAge: 1        frostOccured: true."Apply the decreaseYield method"tree decreaseYield .self assert: (tree getYield = 12)	! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:34' prior: 81501!testDecrising	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."	| tree |	tree := ApricotTree new.	tree		initializeTree: 'Apricot Tree'		age: 4		height: 1		yield: 10		fruitingAge: 1		frostOccured: true.	"Apply the decreaseYield method"	tree decreaseYield.	self assert: tree getYield equals: 12! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:36' prior: 8731!testDecrementing	"A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."	| counter |	counter := MyTestClass new.	counter counter: 5.	counter decrement.	self assert: counter value equals: 4! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:36' prior: 7173!testIncrementing	"A test that will check if method increment is working properly.     Test value 5. Expected result 6."	| counter |	counter := MyTestClass new.	counter counter: 5.	counter increment.	self assert: counter value equals: 6! !!ApricotTree methodsFor: 'initialization' stamp: '10/10/2024 00:40' prior: 66089!initialize     species := 'Apricot Tree'.    age := 0.    height := 1.0.    yield := 10.    fruitingAge := 3.     frostOccured := true. ! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:42' prior: 83317!testDecrementing	"A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."	| counter |	counter := MyTestClass new.	counter counter: 5.	counter decrement.	self assert: counter counter equals: 4! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:43' prior: 83965!testIncrementing	"A test that will check if method increment is working properly.     Test value 5. Expected result 6."	| counter |	counter := MyTestClass new.	counter counter: 5.	counter increment.	self assert: counter counter equals: 6! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:43' prior: 85725!testIncrementing	"A test that will check if method increment is working properly.     Test value 5. Expected result 6."	| counterT |	counterT := MyTestClass new.	counterT counter: 5.	counterT increment.	self assert: counterT counter equals: 6! !!FruitTree methodsFor: 'initialization' stamp: '10/10/2024 00:48' prior: 29219!initializeTree: aSpecies age: anAge height: aHeight yield: aYield fruitingAge: aFruitingAge frostOccured: afrostOccured     species := aSpecies.    age := anAge.    height := aHeight.    yield := aYield.    fruitingAge := aFruitingAge.	 frostOccured := afrostOccured.! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:50' prior: 85071!testDecrementing	"A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."	| classT |	classT := MyTestClass new.	classT counter: 5.	classT decrement.	self assert: classT counter equals: 4! !!MyTestClass methodsFor: 'accessing' stamp: '10/10/2024 00:50'!getCounter [    ^counter.]! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:51' prior: 87755!testDecrementing	"A test that will check if method decrement is working properly.   Test value 5. Expested result is 4."	| classT |	classT := MyTestClass new.	classT counter: 5.	classT decrement.	self assert: classT getCounter equals: 4! !!MyTestClass methodsFor: 'accessing' stamp: '10/10/2024 00:51'!setCounter: anInteger	"Method that sets *annteger* as a variable value"	counter := anInteger! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:56' prior: 86377!testIncrementing	"A test that will check if method increment is working properly.     Test value 5. Expected result 6."	| counterT |	counterT := MyTestClass new.	counterT counter: 5.	counterT increment.	self assert: counterT counter equals: 6! !!MyTestClassTest methodsFor: 'tests' stamp: '10/10/2024 00:56' prior: 89565!testIncrementing	"A test that will check if method increment is working properly.     Test value 5. Expected result 6."	| counterT |	counterT := MyTestClass new.	counterT setCounter: 5.	counterT increment .		self assert: counterT getCounter equals: 6! !!MyTestClassTest methodsFor: 'nil' stamp: '10/10/2024 01:01'!testAging	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."	| tree |	tree := FruitTree new.	tree		initializeTree: 'Apricot Tree'		age: 4		height: 1		yield: 10		fruitingAge: 1		frostOccured: true.   tree printTree: Transcript .	"Apply the decreaseYield method"	tree growOneYear: true.	self assert: tree getAge equals: 5! !!MyTestClassTest methodsFor: 'nil' stamp: '10/10/2024 01:03'!testIncreasing	"A test that will check if method decrement is working properly.   Test value 10. Expested result is 12."	| tree |	tree := FruitTree new.	tree		initializeTree: 'Apricot Tree'		age: 4		height: 1		yield: 10		fruitingAge: 1		frostOccured: true.   tree printTree: Transcript .	"Apply the decreaseYield method"	tree increaseYield .	self assert: tree getYield equals: 20! !----SNAPSHOT----2024-10-10T01:04:08.017+03:00 ProjectTest.image priorSource: 36202!----SNAPSHOT----2024-10-10T01:04:08.058+03:00 ProjectTest.image priorSource: 46292!